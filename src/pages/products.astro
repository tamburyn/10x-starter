---
import DashboardLayout from '../layouts/DashboardLayout.astro';
import { DashboardHeader } from '../components/DashboardHeader';
import { ProductService } from '../db/products';

// Get initial products data server-side for better performance
const productsResponse = await ProductService.getProductsWithStock(Astro.locals.supabase);
const initialProducts = productsResponse.data || [];

// Pass Supabase client data for client-side operations
const supabaseConfig = {
  url: import.meta.env.PUBLIC_SUPABASE_URL,
  anonKey: import.meta.env.PUBLIC_SUPABASE_ANON_KEY,
};
---

<DashboardLayout title="Produkty - BangProof B2B">
  <DashboardHeader 
    title="Zarządzanie produktami" 
    description="Przeglądaj stan magazynu i możliwości produkcyjne w czasie rzeczywistym"
    client:load
  >
    <div class="flex items-center space-x-2">
      <span class="text-sm text-gray-500">
        Ostatnia aktualizacja: {new Date().toLocaleTimeString('pl-PL')}
      </span>
      <div class="h-2 w-2 bg-green-500 rounded-full animate-pulse" title="Dane na żywo"></div>
    </div>
  </DashboardHeader>

  <!-- Products Table Component -->
  <div class="mt-6">
    <div id="products-table-container">
      <!-- This will be hydrated by React -->
      <div class="text-center py-8 text-gray-500">
        Ładowanie danych produktów...
      </div>
    </div>
  </div>

  <!-- Debug Info -->
  <div class="mt-4 p-4 bg-[#f5f5f5] rounded text-sm">
    <strong>Debug:</strong> Znaleziono {initialProducts.length} produktów w bazie danych.
    {initialProducts.length > 0 && (
      <div class="mt-2">
        <strong>Pierwszy produkt:</strong> {initialProducts[0].name} 
        (SKU: {initialProducts[0].sku}, buildable_units: {initialProducts[0].buildable_units})
      </div>
    )}
  </div>

  <!-- Additional Info -->
  <div class="mt-8 bg-[#f5f5f5] border border-gray-200 rounded-lg p-4">
    <div class="flex">
      <div class="flex-shrink-0">
        <svg class="h-5 w-5 text-[#75b4cf]" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
        </svg>
      </div>
      <div class="ml-3">
        <h3 class="text-sm font-medium text-gray-900">
          Informacje o danych
        </h3>
        <div class="mt-2 text-sm text-gray-700">
          <p>
            Dane o produktach są synchronizowane w czasie rzeczywistym z systemami Shopify i BigQuery. 
            Stany magazynowe oraz możliwości produkcyjne są aktualizowane automatycznie.
          </p>
        </div>
      </div>
    </div>
  </div>
</DashboardLayout>

<script define:vars={{ initialProducts, supabaseConfig }}>
  document.addEventListener('DOMContentLoaded', () => {
    console.log('Products page loaded');
    console.log('Initial products:', initialProducts);
    
    const container = document.getElementById('products-table-container');
    if (container && initialProducts) {
      // Create simple table with all products
      const productsHtml = initialProducts.slice(0, 50).map(product => {
        const status = product.buildable_units === 0 ? 'Niedostępny' : 
                      product.buildable_units <= 10 ? 'Niski stan' : 'Dostępny';
        const statusColor = product.buildable_units === 0 ? 'text-red-600' : 
                           product.buildable_units <= 10 ? 'text-yellow-600' : 'text-green-600';
        const statusBg = product.buildable_units === 0 ? 'bg-red-100' : 
                        product.buildable_units <= 10 ? 'bg-yellow-100' : 'bg-green-100';
        
        return `
                      <tr class="border-b hover:bg-[#f5f5f5]">
            <td class="px-4 py-2 font-mono text-sm">${product.sku}</td>
            <td class="px-4 py-2 font-medium">${product.name}</td>
            <td class="px-4 py-2 text-right font-semibold">${product.buildable_units.toLocaleString('pl-PL')}</td>
            <td class="px-4 py-2">
              <span class="inline-flex px-2 py-1 text-xs font-medium rounded-full ${statusColor} ${statusBg}">
                ${status}
              </span>
            </td>
            <td class="px-4 py-2 text-sm text-gray-600">${new Date(product.last_updated).toLocaleString('pl-PL')}</td>
          </tr>
        `;
      }).join('');

      container.innerHTML = `
        <div class="bg-white rounded-lg shadow overflow-hidden">
          <div class="px-6 py-4 border-b border-gray-200">
            <div class="flex items-center justify-between">
              <h2 class="text-xl font-bold text-gray-900">Lista produktów</h2>
              <span class="text-sm text-gray-500">${initialProducts.length} produktów</span>
            </div>
            
            <!-- Quick Stats -->
            <div class="grid grid-cols-4 gap-4 mt-4 text-sm">
              <div class="text-center p-2 bg-[#f5f5f5] rounded">
                <div class="font-semibold text-gray-900">${initialProducts.filter(p => p.buildable_units > 10).length}</div>
                <div class="text-gray-600">Dostępne</div>
              </div>
              <div class="text-center p-2 bg-yellow-50 rounded">
                <div class="font-semibold text-yellow-800">${initialProducts.filter(p => p.buildable_units > 0 && p.buildable_units <= 10).length}</div>
                <div class="text-yellow-600">Niski stan</div>
              </div>
              <div class="text-center p-2 bg-red-50 rounded">
                <div class="font-semibold text-red-800">${initialProducts.filter(p => p.buildable_units === 0).length}</div>
                <div class="text-red-600">Niedostępne</div>
              </div>
              <div class="text-center p-2 bg-[#f5f5f5] rounded">
                <div class="font-semibold text-gray-900">${initialProducts.length}</div>
                <div class="text-gray-600">Łącznie</div>
              </div>
            </div>
          </div>
          
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-[#f5f5f5]">
                <tr>
                  <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">SKU</th>
                  <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nazwa produktu</th>
                  <th class="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Jednostki do wyprodukowania</th>
                  <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                  <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ostatnia aktualizacja</th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                ${productsHtml}
              </tbody>
            </table>
          </div>
          
          ${initialProducts.length > 50 ? `
            <div class="px-6 py-4 bg-[#f5f5f5] border-t border-gray-200">
              <p class="text-sm text-gray-500">Wyświetlono 50 z ${initialProducts.length} produktów. Pełna funkcjonalność będzie dostępna po wdrożeniu React komponentu.</p>
            </div>
          ` : ''}
        </div>
      `;
    }
  });
</script>

<style>
  /* Custom styles for better table presentation */
  #products-table-container {
    min-height: 400px;
  }
  
  /* Responsive table improvements */
  @media (max-width: 768px) {
    #products-table-container .overflow-x-auto {
      border-radius: 0.5rem;
      box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
    }
  }
</style> 